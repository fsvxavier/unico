package mocks

import (
	"github.com/fsvxavier/unico/models"
	"github.com/stretchr/testify/mock"
)

//NewFeiraLivreRepository is an autogenerated mock type for the repository type
type NewFeiraLivreUseCase struct {
	mock.Mock
}

//GetByID provides a mock function
func (u *NewFeiraLivreUseCase) GetByID(id int64) ([]*models.FeiraLivre, error) {
	ret := u.Called(id)

	var r0 []*models.FeiraLivre
	if rf, ok := ret.Get(0).(func(int64) []*models.FeiraLivre); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FeiraLivre)
		}
	}
	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

//GetAll provides a mock function
func (u *NewFeiraLivreUseCase) GetAllByIds(ids string) ([]*models.FeiraLivre, error) {
	ret := u.Called(ids)

	var r0 []*models.FeiraLivre
	if rf, ok := ret.Get(0).(func(string) []*models.FeiraLivre); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FeiraLivre)
		}
	}
	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CreateFeiraLivre...
func (u *NewFeiraLivreUseCase) CreateFeiraLivre(iFeiras *models.FeiraLivre) (*models.Response, error) {
	ret := u.Called(iFeiras)

	var r0 *models.Response
	if rf, ok := ret.Get(0).(func(*models.FeiraLivre) *models.Response); ok {
		r0 = rf(iFeiras)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Response)
		}
	}
	var r1 error
	if rf, ok := ret.Get(1).(func(*models.FeiraLivre) error); ok {
		r1 = rf(iFeiras)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

//SearchFeiraLivre provides a mock function
func (u *NewFeiraLivreUseCase) SearchFeiraLivre(sFeiras *models.SearchFeiraLivre) ([]*models.FeiraLivre, error) {
	ret := u.Called(sFeiras)

	var r0 []*models.FeiraLivre
	if rf, ok := ret.Get(0).(func(*models.SearchFeiraLivre) []*models.FeiraLivre); ok {
		r0 = rf(sFeiras)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FeiraLivre)
		}
	}
	var r1 error
	if rf, ok := ret.Get(1).(func(*models.SearchFeiraLivre) error); ok {
		r1 = rf(sFeiras)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UpdateFeiraLivre provides a mock function
func (u *NewFeiraLivreUseCase) UpdateFeiraLivre(iFeiras *models.FeiraLivre) (*models.Response, error) {
	ret := u.Called(iFeiras)

	var r0 *models.Response
	if rf, ok := ret.Get(0).(func(*models.FeiraLivre) *models.Response); ok {
		r0 = rf(iFeiras)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Response)
		}
	}
	var r1 error
	if rf, ok := ret.Get(1).(func(*models.FeiraLivre) error); ok {
		r1 = rf(iFeiras)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DeleteFeiraLivre provides a mock function
func (u *NewFeiraLivreUseCase) DeleteFeiraLivre(id int64) (*models.Response, error) {
	ret := u.Called(id)

	var r0 *models.Response
	if rf, ok := ret.Get(0).(func(int64) *models.Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Response)
		}
	}
	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}
